From 25a30118ba890ffa86beb50c9a283ea706e8b58d Mon Sep 17 00:00:00 2001
From: Nicolas Bock <nicolasbock@gmail.com>
Date: Sun, 1 May 2022 06:55:38 -0600
Subject: [PATCH] Transition to Python3

Signed-off-by: Nicolas Bock <nicolasbock@gmail.com>
---
 python/oauth2.py | 43 ++++++++++++++++++++++---------------------
 1 file changed, 22 insertions(+), 21 deletions(-)

diff --git a/python/oauth2.py b/python/oauth2.py
index e0fc7fb..c2f5219 100755
--- a/python/oauth2.py
+++ b/python/oauth2.py
@@ -1,4 +1,4 @@
-#!/usr/bin/python
+#!/usr/bin/python3
 #
 # Copyright 2012 Google Inc.
 #
@@ -66,7 +66,8 @@ import json
 from optparse import OptionParser
 import smtplib
 import sys
-import urllib
+import urllib.parse
+import urllib.request
 
 
 def SetupOptionParser():
@@ -144,7 +145,7 @@ def AccountsUrl(command):
 
 def UrlEscape(text):
   # See OAUTH 5.1 for a definition of which characters need to be escaped.
-  return urllib.quote(text, safe='~-._')
+  return urllib.parse.quote(text, safe='~-._')
 
 
 def UrlUnescape(text):
@@ -162,7 +163,7 @@ def FormatUrlParams(params):
     A URL query string version of the given parameters.
   """
   param_fragments = []
-  for param in sorted(params.iteritems(), key=lambda x: x[0]):
+  for param in sorted(params.items(), key=lambda x: x[0]):
     param_fragments.append('%s=%s' % (param[0], UrlEscape(param[1])))
   return '&'.join(param_fragments)
 
@@ -211,7 +212,7 @@ def AuthorizeTokens(client_id, client_secret, authorization_code):
   params['grant_type'] = 'authorization_code'
   request_url = AccountsUrl('o/oauth2/token')
 
-  response = urllib.urlopen(request_url, urllib.urlencode(params)).read()
+  response = urllib.request.urlopen(request_url, urllib.parse.urlencode(params).encode('utf-8')).read()
   return json.loads(response)
 
 
@@ -235,7 +236,7 @@ def RefreshToken(client_id, client_secret, refresh_token):
   params['grant_type'] = 'refresh_token'
   request_url = AccountsUrl('o/oauth2/token')
 
-  response = urllib.urlopen(request_url, urllib.urlencode(params)).read()
+  response = urllib.request.urlopen(request_url, urllib.parse.urlencode(params).encode('utf-8')).read()
   return json.loads(response)
 
 
@@ -268,7 +269,7 @@ def TestImapAuthentication(user, auth_string):
     auth_string: A valid OAuth2 string, as returned by GenerateOAuth2String.
         Must not be base64-encoded, since imaplib does its own base64-encoding.
   """
-  print
+  print()
   imap_conn = imaplib.IMAP4_SSL('imap.gmail.com')
   imap_conn.debug = 4
   imap_conn.authenticate('XOAUTH2', lambda x: auth_string)
@@ -283,7 +284,7 @@ def TestSmtpAuthentication(user, auth_string):
     auth_string: A valid OAuth2 string, not base64-encoded, as returned by
         GenerateOAuth2String.
   """
-  print
+  print()
   smtp_conn = smtplib.SMTP('smtp.gmail.com', 587)
   smtp_conn.set_debuglevel(True)
   smtp_conn.ehlo('test')
@@ -294,7 +295,7 @@ def TestSmtpAuthentication(user, auth_string):
 def RequireOptions(options, *args):
   missing = [arg for arg in args if getattr(options, arg) is None]
   if missing:
-    print 'Missing options: %s' % ' '.join(missing)
+    print('Missing options: %s' % ' '.join(missing))
     sys.exit(-1)
 
 
@@ -306,27 +307,27 @@ def main(argv):
     response = RefreshToken(options.client_id, options.client_secret,
                             options.refresh_token)
     if options.quiet:
-      print response['access_token']
+      print(response['access_token'])
     else:
-      print 'Access Token: %s' % response['access_token']
-      print 'Access Token Expiration Seconds: %s' % response['expires_in']
+      print('Access Token: %s' % response['access_token'])
+      print('Access Token Expiration Seconds: %s' % response['expires_in'])
   elif options.generate_oauth2_string:
     RequireOptions(options, 'user', 'access_token')
     oauth2_string = GenerateOAuth2String(options.user, options.access_token)
     if options.quiet:
-      print oauth2_string
+      print(oauth2_string)
     else:
-      print 'OAuth2 argument:\n' + oauth2_string
+      print('OAuth2 argument:\n' + oauth2_string)
   elif options.generate_oauth2_token:
     RequireOptions(options, 'client_id', 'client_secret')
-    print 'To authorize token, visit this url and follow the directions:'
-    print '  %s' % GeneratePermissionUrl(options.client_id, options.scope)
-    authorization_code = raw_input('Enter verification code: ')
+    print('To authorize token, visit this url and follow the directions:')
+    print('  %s' % GeneratePermissionUrl(options.client_id, options.scope))
+    authorization_code = input('Enter verification code: ')
     response = AuthorizeTokens(options.client_id, options.client_secret,
                                 authorization_code)
-    print 'Refresh Token: %s' % response['refresh_token']
-    print 'Access Token: %s' % response['access_token']
-    print 'Access Token Expiration Seconds: %s' % response['expires_in']
+    print('Refresh Token: %s' % response['refresh_token'])
+    print('Access Token: %s' % response['access_token'])
+    print('Access Token Expiration Seconds: %s' % response['expires_in'])
   elif options.test_imap_authentication:
     RequireOptions(options, 'user', 'access_token')
     TestImapAuthentication(options.user,
@@ -339,7 +340,7 @@ def main(argv):
                              base64_encode=False))
   else:
     options_parser.print_help()
-    print 'Nothing to do, exiting.'
+    print('Nothing to do, exiting.')
     return
 
 
-- 
2.34.1

